// [PGS] 예산 / leve1
// 난이도 :  level 1
// 풀이시간 : 40분  
// 점수 : 7

/*
문제
S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

제한사항
d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.
d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.
budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.
입출력 예
d	budget	result
[1,3,2,5,4]	9	3
[2,2,3,3]	10	4
입출력 예 설명
입출력 예 #1
각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다. 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다. 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다.

1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.
1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.
3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다.

입출력 예 #2
모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다.
*/


/*
< 의사코드 >
적은 금액부터 구매하면 많은 부서의 물품을 구매할 수 있다.
가격을 sort로 정렬하여 순서대로 뺀 후 budget가 0 아래로 내려갈 경우에는 멈추고
그렇지 않을 경우에는 count를 세어준다.

1. 횟수를 담을 count를 숫자형으로 선언
2. sort로 d를 arr에 정렬하여 담아준다.
3. for문으로 arr의 요소를 하나씩 확인하면서  budget에서 빼준다
4. 삼항연산자로 참일경우 count+=1를 해주고 아니면 null

*/
 
function solution(d, budget) {
    let count = 0;
    let arr = d.sort();
    for(let i = 0; arr.length; i++) {
        budget -= arr[i];
        budget < 0 ? count+=1 : null 
    }

    return count
}

 /*
실패
코드가 끝나지 않음 식 중간에 멈춰주는 과정이 필요하겠다고 판단함
삼항연산자에서 if문으로 바꾸고 break를 활용하여 if문에서 break!
 */


function solution(d, budget) {
    let count = 0;
    let arr = d.sort((a,b) => a-b);
    for(let i = 0; arr.length; i++) {
        budget -= arr[i];
        if(budget < 0) {
            break;
        } else {
            count++

        } 
    }

    return count
}

 /*
실패
테스트 1번은 통과하지만 2번에서 10초를 초과하여 실행이 중단됨
실행 시간이 10.0초를 초과하여 실행이 중단되었습니다. 실행 시간이 더 짧은 다른 방법을 찾아보세요.

무언가 잘못되었다
for문에 끝나는 i를 설정 해 주지 않아서 생긴 문제였다..^^.. 
울지마 바보야~ 난정말 괜찮아~ 
허탈..
 */


function solution(d, budget) {
    let count = 0;
    let arr = d.sort();
    for(let i = 0; i < arr.length; i++) {
        budget -= arr[i];
        budget < 0 ? null : count+=1
    }

    return count
}

/*
부분실패
테스트 1 〉	통과 (0.04ms, 33.4MB)
테스트 2 〉	통과 (0.05ms, 33.4MB)
테스트 3 〉	통과 (0.04ms, 33.4MB)
테스트 4 〉	통과 (0.06ms, 33.3MB)
테스트 5 〉	실패 (0.04ms, 33.4MB)
테스트 6 〉	통과 (0.07ms, 33.4MB)
테스트 7 〉	실패 (0.09ms, 33.5MB)
테스트 8 〉	실패 (0.10ms, 33.6MB)
테스트 9 〉	실패 (0.06ms, 33.5MB)
테스트 10 〉	실패 (0.10ms, 33.4MB)
테스트 11 〉	실패 (0.09ms, 33.5MB)
테스트 12 〉	실패 (0.11ms, 33.4MB)
테스트 13 〉	실패 (0.09ms, 33.5MB)
테스트 14 〉	실패 (0.06ms, 33.4MB)
테스트 15 〉	실패 (0.09ms, 33.4MB)
테스트 16 〉	실패 (0.11ms, 33.5MB)
테스트 17 〉	통과 (0.06ms, 33.4MB)
테스트 18 〉	통과 (0.07ms, 33.4MB)
테스트 19 〉	통과 (0.07ms, 33.4MB)
테스트 20 〉	통과 (0.06ms, 33.4MB)
테스트 21 〉	통과 (0.05ms, 33.4MB)
테스트 22 〉	통과 (0.05ms, 33.5MB)
테스트 23 〉	통과 (0.06ms, 33.4MB)
*/


/*
sort를 그냥 괄호만 사용하면 오름차순으로 잘 정렬 되는 것으로 알고 있었는데
sort안에서 화살표 함수를 사용해서 오름차순으로 잘 정의 해 줘야
통과가 되었다.
이유는 왜인지 모르겠다
*/
function solution(d, budget) {
    let count = 0;
    let arr = d.sort((a,b) => a-b);
    for(let i = 0; i < arr.length; i++) {
        budget -= arr[i];
        if(budget < 0) {
            break;
        } else {
            count++

        } 
    }

    return count
}

/*
성공
테스트 1 〉	통과 (0.04ms, 33.4MB)
테스트 2 〉	통과 (0.04ms, 33.6MB)
테스트 3 〉	통과 (0.04ms, 33.5MB)
테스트 4 〉	통과 (0.05ms, 33.5MB)
테스트 5 〉	통과 (0.05ms, 33.5MB)
테스트 6 〉	통과 (0.05ms, 33.4MB)
테스트 7 〉	통과 (0.21ms, 33.6MB)
테스트 8 〉	통과 (0.15ms, 33.6MB)
테스트 9 〉	통과 (0.14ms, 33.5MB)
테스트 10 〉	통과 (0.14ms, 33.5MB)
테스트 11 〉	통과 (0.14ms, 33.5MB)
테스트 12 〉	통과 (0.16ms, 33.4MB)
테스트 13 〉	통과 (0.20ms, 33.5MB)
테스트 14 〉	통과 (0.21ms, 33.5MB)
테스트 15 〉	통과 (0.14ms, 33.4MB)
테스트 16 〉	통과 (0.14ms, 33.6MB)
테스트 17 〉	통과 (0.18ms, 33.7MB)
테스트 18 〉	통과 (0.15ms, 33.4MB)
테스트 19 〉	통과 (0.16ms, 33.5MB)
테스트 20 〉	통과 (0.18ms, 32.5MB)
테스트 21 〉	통과 (0.18ms, 33.6MB)
테스트 22 〉	통과 (0.21ms, 33.5MB)
테스트 23 〉	통과 (0.13ms, 33.5MB)
*/