// [PGS] 올바른 괄호 / leve2 
// 난이도 :  level 2
// 풀이시간 : 1시간
// 점수 : 효율성 실패

/*
문제
괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다. 예를 들어

"()()" 또는 "(())()" 는 올바른 괄호입니다.
")()(" 또는 "(()(" 는 올바르지 않은 괄호입니다.
'(' 또는 ')' 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.

제한사항
문자열 s의 길이 : 100,000 이하의 자연수
문자열 s는 '(' 또는 ')' 로만 이루어져 있습니다.
입출력 예
s	answer
"()()"	true
"(())()"	true
")()("	false
"(()("	false
입출력 예 설명
입출력 예 #1,2,3,4
문제의 예시와 같습니다.
*/
  

/*
< 의사코드 >
()하나를 검사하여 새로운 배열에 추가 하는 방법으로 풀면 되겠지 싶었으나
여는 괄호가 연속으로 있는 경우도 있음
주어지는 문자열s를 쪼개서 여는괄호 다음에 닫는 괄호가 있을 경우 
그 배열에서 해당 index와 +1 index를 새로운
배열이 0일 경우 true 0이 아닐 경우 false를 출력

1. 
*/

function solution(s){
    let arr = [...s];
     console.log(arr)
    for(let i = 0; i < arr.length; i++) {
     if(arr[i] === "(" && arr[i+1] === ")") {
         arr.splice(i+1 , i + 2);
     }
    }
     return arr
 }

/*
실패
식이 반복하지 않음
테스트 1
입력값 〉	"()()"
기댓값 〉	true
실행 결과 〉	실행한 결괏값 ["(",")"]이 기댓값 true과 다릅니다.
출력 〉	[ '(', ')', '(', ')' ]
테스트 2
입력값 〉	"(())()"
기댓값 〉	true
실행 결과 〉	실행한 결괏값 ["(","(",")"]이 기댓값 true과 다릅니다.
출력 〉	[ '(', '(', ')', ')', '(', ')' ]
테스트 3
입력값 〉	")()("
기댓값 〉	false
실행 결과 〉	실행한 결괏값 [")","("]이 기댓값 false과 다릅니다.
출력 〉	[ ')', '(', ')', '(' ]
테스트 4
입력값 〉	"(()("
기댓값 〉	false
실행 결과 〉	실행한 결괏값 ["(","("]이 기댓값 false과 다릅니다.
출력 〉	[ '(', '(', ')', '(' ]
*/

/*
새로운 배열에 하나씩 넣어보면서 
원래 괄호의 길이와 새로운 배열의 길이를 비교 해 보자
*/

function solution(s){
    let arr = [...s];
    let bracketSet = [];

    for(let i = 0; i < arr.length; i++) {
     if(arr[i] === "(" && arr[i+1] === ")") {
        bracketSet.push(arr[i], arr[i+1]);
     }
    }
     return arr.length === bracketSet.length ? true : false;
 }

 /*
 테스트 2 톨과못해서 실패

 테스트 1
입력값 〉	"()()"
기댓값 〉	true
실행 결과 〉	테스트를 통과하였습니다.
테스트 2
입력값 〉	"(())()"
기댓값 〉	true
실행 결과 〉	실행한 결괏값 false이 기댓값 true과 다릅니다.
테스트 3
입력값 〉	")()("
기댓값 〉	false
실행 결과 〉	테스트를 통과하였습니다.
테스트 4
입력값 〉	"(()("
기댓값 〉	false
실행 결과 〉	테스트를 통과하였습니다.
 */

/*
여는괄호가 오면 (를 새로운 배열bracketSet에 push,
그렇지 못한 경우에는 삼항연산자로 안에서 한번 더 조건을 두는데
새로운 배열에 (가 들어갔는데 이미 있다면 pop을 하고 bracketSet에 arr[i]를 넣음
마지막에 bracketSet의 길이를 확인하여
0일경우 true 0이 아닐 경우 false return

*/

function solution(s){
    let arr = [...s];
    let bracketSet = [];

    for(let i = 0; i < arr.length; i++) {
     if(arr[i] === "(" ) {
        bracketSet.push(arr[i]);
     } else {
        bracketSet[bracketSet.length -1] === "(" ?
            bracketSet.pop() :
            bracketSet.push(arr[i])
        
     }
    }
     return bracketSet.length === 0 ? true : false;
 }

 /*
 정확성은 모두 통과했으나 효율성에서 실패!

 정확성  테스트
테스트 1 〉	통과 (0.04ms, 33.4MB)
테스트 2 〉	통과 (0.05ms, 33.4MB)
테스트 3 〉	통과 (0.04ms, 33.4MB)
테스트 4 〉	통과 (0.05ms, 33.4MB)
테스트 5 〉	통과 (0.05ms, 33.3MB)
테스트 6 〉	통과 (0.05ms, 33.4MB)
테스트 7 〉	통과 (0.05ms, 33.4MB)
테스트 8 〉	통과 (0.05ms, 33.4MB)
테스트 9 〉	통과 (0.13ms, 33.5MB)
테스트 10 〉	통과 (0.05ms, 33.4MB)
테스트 11 〉	통과 (0.05ms, 33.4MB)
테스트 12 〉	통과 (0.14ms, 33.4MB)
테스트 13 〉	통과 (0.13ms, 33.4MB)
테스트 14 〉	통과 (0.17ms, 33.4MB)
테스트 15 〉	통과 (0.13ms, 33.4MB)
테스트 16 〉	통과 (0.14ms, 33.4MB)
테스트 17 〉	통과 (0.13ms, 33.5MB)
테스트 18 〉	통과 (0.14ms, 33.4MB)
효율성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	실패 (시간 초과)
 */
