// [PGS] 최솟값 만들기 / leve2
// 난이도 :  leve2
// 풀이시간 : 5
// 점수 : +3

/*
문제
길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.
배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 
이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다. 
이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. 
(단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)

예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면

A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. 
(누적된 값 : 0 + 5(1x5) = 5)
A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. 
(누적된 값 : 5 + 16(4x4) = 21)
A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. 
(누적된 값 : 21 + 8(2x4) = 29)
즉, 이 경우가 최소가 되므로 29를 return 합니다.

배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.

제한사항
배열 A, B의 크기 : 1,000 이하의 자연수
배열 A, B의 원소의 크기 : 1,000 이하의 자연수
입출력 예
A	B	answer
[1, 4, 2]	[5, 4, 4]	29
[1,2]	[3,4]	10
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
A에서 첫번째 숫자인 1, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. 
(누적된 값 : 4) 다음, A에서 두번째 숫자인 2, B에서 첫번째 숫자인 3을 뽑아 곱하여 더합니다.
 (누적된 값 : 4 + 6 = 10)
이 경우가 최소이므로 10을 return 합니다.
/*
<의사코드>
 두 배열에서 각각 숫자를 뽑아 곱해서 더한 숫자가 작게 나오게 하는 것이 목표
 최대한 작은 숫자를 곱해서 풀이 하도록 한다
제일큰숫자 + A의 다음 index와 B의 다음 index를 곱해서 각 수를 더해주면 끗
과연 생각대로 될까

 1. 들어오는 배열 모두 sort
 2. 
*/

function solution(A, B) {
  let result = 0;
  A.sort((a, b) => a - b);
  B.sort((a, b) => a - b);
  for (let i = 0; i < A.length; i++) {
    result += A[i] * B[i];
  }
  return result;
}

/*
왜 나는 항상 한번에 성공을 못하는 것인가
테스트 1
입력값 〉	[1, 4, 2], [5, 4, 4]
기댓값 〉	29
실행 결과 〉	실행한 결괏값 32이 기댓값 29과 다릅니다.
테스트 2
입력값 〉	[1, 2], [3, 4]
기댓값 〉	10
실행 결과 〉	실행한 결괏값 11이 기댓값 10과 다릅니다.

ㅋㅋㅋㅋㅋ
아 뒤에 배열 큰숫자부터 한다고 해놓고 A배열이랑 sort를 똑같이 해벌임..
 */

function solution(A, B) {
  let result = 0;
  A.sort((a, b) => a - b);
  B.sort((a, b) => b - a);
  for (let i = 0; i < A.length; i++) {
    result += A[i] * B[i];
  }
  return result;
}

/*
정확성  테스트
테스트 1 〉	통과 (0.04ms, 33.5MB)
테스트 2 〉	통과 (0.17ms, 33.5MB)
테스트 3 〉	통과 (0.22ms, 33.4MB)
테스트 4 〉	통과 (0.17ms, 33.4MB)
테스트 5 〉	통과 (0.20ms, 33.5MB)
테스트 6 〉	통과 (0.17ms, 33.5MB)
테스트 7 〉	통과 (0.17ms, 33.4MB)
테스트 8 〉	통과 (0.17ms, 33.4MB)
테스트 9 〉	통과 (0.18ms, 33.5MB)
테스트 10 〉	통과 (0.17ms, 33.6MB)
테스트 11 〉	통과 (0.15ms, 33.4MB)
테스트 12 〉	통과 (0.15ms, 33.5MB)
테스트 13 〉	통과 (0.15ms, 33.4MB)
테스트 14 〉	통과 (0.15ms, 33.5MB)
테스트 15 〉	통과 (0.15ms, 33.5MB)
테스트 16 〉	통과 (0.15ms, 33.5MB)
효율성  테스트
테스트 1 〉	통과 (0.75ms, 33.1MB)
테스트 2 〉	통과 (0.81ms, 33MB)
테스트 3 〉	통과 (0.85ms, 33MB)
테스트 4 〉	통과 (0.73ms, 33MB)
   */
