// 프로그래머스 양궁대회
// 난이도 :  level 2
// 풀이시간 : 실패

/*
문제
카카오배 양궁대회가 열렸습니다.
라이언은 저번 카카오배 양궁대회 우승자이고 이번 대회에도 결승전까지 올라왔습니다. 결승전 상대는 어피치입니다.
카카오배 양궁대회 운영위원회는 한 선수의 연속 우승보다는 다양한 선수들이 양궁대회에서 우승하기를 원합니다. 따라서, 양궁대회 운영위원회는 결승전 규칙을 전 대회 우승자인 라이언에게 불리하게 다음과 같이 정했습니다.

어피치가 화살 n발을 다 쏜 후에 라이언이 화살 n발을 쏩니다.
점수를 계산합니다.
과녁판은 아래 사진처럼 생겼으며 가장 작은 원의 과녁 점수는 10점이고 가장 큰 원의 바깥쪽은 과녁 점수가 0점입니다. 01_2022_공채문제_양궁대회_01.png
만약, k(k는 1~10사이의 자연수)점을 어피치가 a발을 맞혔고 라이언이 b발을 맞혔을 경우 더 많은 화살을 k점에 맞힌 선수가 k 점을 가져갑니다. 단, a = b일 경우는 어피치가 k점을 가져갑니다. k점을 여러 발 맞혀도 k점 보다 많은 점수를 가져가는 게 아니고 k점만 가져가는 것을 유의하세요. 또한 a = b = 0 인 경우, 즉, 라이언과 어피치 모두 k점에 단 하나의 화살도 맞히지 못한 경우는 어느 누구도 k점을 가져가지 않습니다.
예를 들어, 어피치가 10점을 2발 맞혔고 라이언도 10점을 2발 맞혔을 경우 어피치가 10점을 가져갑니다.
다른 예로, 어피치가 10점을 0발 맞혔고 라이언이 10점을 2발 맞혔을 경우 라이언이 10점을 가져갑니다.
모든 과녁 점수에 대하여 각 선수의 최종 점수를 계산합니다.
최종 점수가 더 높은 선수를 우승자로 결정합니다. 단, 최종 점수가 같을 경우 어피치를 우승자로 결정합니다.
현재 상황은 어피치가 화살 n발을 다 쏜 후이고 라이언이 화살을 쏠 차례입니다.
라이언은 어피치를 가장 큰 점수 차이로 이기기 위해서 n발의 화살을 어떤 과녁 점수에 맞혀야 하는지를 구하려고 합니다.

화살의 개수를 담은 자연수 n, 어피치가 맞힌 과녁 점수의 개수를 10점부터 0점까지 순서대로 담은 정수 배열 info가 매개변수로 주어집니다. 이때, 라이언이 가장 큰 점수 차이로 우승하기 위해 n발의 화살을 어떤 과녁 점수에 맞혀야 하는지를 10점부터 0점까지 순서대로 정수 배열에 담아 return 하도록 solution 함수를 완성해 주세요. 만약, 라이언이 우승할 수 없는 경우(무조건 지거나 비기는 경우)는 [-1]을 return 해주세요.

제한사항
1 ≤ n ≤ 10
info의 길이 = 11
0 ≤ info의 원소 ≤ n
info의 원소 총합 = n
info의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수입니다. ( i는 0~10 사이의 정수입니다.)
라이언이 우승할 방법이 있는 경우, return 할 정수 배열의 길이는 11입니다.
0 ≤ return할 정수 배열의 원소 ≤ n
return할 정수 배열의 원소 총합 = n (꼭 n발을 다 쏴야 합니다.)
return할 정수 배열의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수입니다. ( i는 0~10 사이의 정수입니다.)
라이언이 가장 큰 점수 차이로 우승할 수 있는 방법이 여러 가지 일 경우, 가장 낮은 점수를 더 많이 맞힌 경우를 return 해주세요.
가장 낮은 점수를 맞힌 개수가 같을 경우 계속해서 그다음으로 낮은 점수를 더 많이 맞힌 경우를 return 해주세요.
예를 들어, [2,3,1,0,0,0,0,1,3,0,0]과 [2,1,0,2,0,0,0,2,3,0,0]를 비교하면 [2,1,0,2,0,0,0,2,3,0,0]를 return 해야 합니다.
다른 예로, [0,0,2,3,4,1,0,0,0,0,0]과 [9,0,0,0,0,0,0,0,1,0,0]를 비교하면[9,0,0,0,0,0,0,0,1,0,0]를 return 해야 합니다.
라이언이 우승할 방법이 없는 경우, return 할 정수 배열의 길이는 1입니다.
라이언이 어떻게 화살을 쏘든 라이언의 점수가 어피치의 점수보다 낮거나 같으면 [-1]을 return 해야 합니다.
입출력 예
n	info	result
5	[2,1,1,1,0,0,0,0,0,0,0]	[0,2,2,0,1,0,0,0,0,0,0]
1	[1,0,0,0,0,0,0,0,0,0,0]	[-1]
9	[0,0,1,2,0,1,1,1,1,1,1]	[1,1,2,0,1,2,2,0,0,0,0]
10	[0,0,0,0,0,0,0,0,3,4,3]	[1,1,1,1,1,1,1,1,0,0,2]
입출력 예 설명
입출력 예 #1

어피치와 라이언이 아래와 같이 화살을 맞힐 경우,

과녁 점수	어피치가 맞힌 화살 개수	라이언이 맞힌 화살 개수	결과
10	2	3	라이언이 10점 획득
9	1	2	라이언이 9점 획득
8	1	0	어피치가 8점 획득
7	1	0	어피치가 7점 획득
6	0	0	
5	0	0	
4	0	0	
3	0	0	
2	0	0	
1	0	0	
0	0	0	
어피치의 최종 점수는 15점, 라이언의 최종 점수는 19점입니다. 4점 차이로 라이언이 우승합니다.

하지만, 라이언이 아래와 같이 화살을 맞힐 경우 더 큰 점수 차로 우승할 수 있습니다.

과녁 점수	어피치가 맞힌 화살 개수	라이언이 맞힌 화살 개수	결과
10	2	0	어피치가 10점 획득
9	1	2	라이언이 9점 획득
8	1	2	라이언이 8점 획득
7	1	0	어피치가 7점 획득
6	0	1	라이언이 6점 획득
5	0	0	
4	0	0	
3	0	0	
2	0	0	
1	0	0	
0	0	0	
어피치의 최종 점수는 17점, 라이언의 최종 점수는 23점입니다. 6점 차이로 라이언이 우승합니다.

따라서 [0,2,2,0,1,0,0,0,0,0,0]을 return 해야 합니다.

입출력 예 #2

라이언이 10점을 맞혀도 어피치가 10점을 가져가게 됩니다.
따라서, 라이언은 우승할 수 없기 때문에 [-1]을 return 해야 합니다.

입출력 예 #3

어피치와 라이언이 아래와 같이 화살을 맞힐 경우,

과녁 점수	어피치가 맞힌 화살 개수	라이언이 맞힌 화살 개수	결과
10	0	1	라이언이 10점 획득
9	0	1	라이언이 9점 획득
8	1	2	라이언이 8점 획득
7	2	3	라이언이 7점 획득
6	0	0	
5	1	2	라이언이 5점 획득
4	1	0	어피치가 4점 획득
3	1	0	어피치가 3점 획득
2	1	0	어피치가 2점 획득
1	1	0	어피치가 1점 획득
0	1	0	어피치가 0점 획득
어피치의 최종 점수는 10점, 라이언의 최종 점수는 39점입니다. 29점 차이로 라이언이 우승합니다.

하지만 라이언이 아래와 같이 화살을 맞힐 경우,

과녁 점수	어피치가 맞힌 화살 개수	라이언이 맞힌 화살 개수	결과
10	0	1	라이언이 10점 획득
9	0	1	라이언이 9점 획득
8	1	2	라이언이 8점 획득
7	2	0	어피치가 7점 획득
6	0	1	라이언이 6점 획득
5	1	2	라이언이 5점 획득
4	1	2	라이언이 4점 획득
3	1	0	어피치가 3점 획득
2	1	0	어피치가 2점 획득
1	1	0	어피치가 1점 획득
0	1	0	어피치가 0점 획득
어피치의 최종 점수는 13점, 라이언의 최종 점수는 42점입니다. 이 경우도 29점 차이로 라이언이 우승합니다.
하지만, 첫 번째 경우와 두 번째 경우를 비교했을 때, 두 번째 경우가 두 경우 중 가장 낮은 점수인 4점을 더 많이 맞혔기 때문에 [1,1,2,3,0,2,0,0,0,0,0]이 아닌 [1,1,2,0,1,2,2,0,0,0,0]을 return 해야 합니다.

입출력 예 #4

가장 큰 점수 차이로 이기는 경우 중에서 가장 낮은 점수를 가장 많이 맞힌, 10~3점을 한 발씩 맞히고 나머지 두 발을 0점에 맞히는 경우인 [1,1,1,1,1,1,1,1,0,0,2]를 return 해야 합니다.
*/

/*
최종점수를 내는데 높은 점수가 승 동점이면 어피치가 이긴다
<현상황 정리>
어피치는 n회 사용함
라이언의 차례
가장 큰 점수차이로 이기기 위해서 라이언은 몇발을 몇점에 맞춰야할까
주어지는 변수는 어피치 n발 + 배열

조건
info의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수
라이언과 어피치 둘다 k점에 못맞출 경우 둘다 0점
라이언이 어피치의 점수보다 낮거나 동점일경우 모두 어피치 승
라이언이 어떻게 화살을 쏘든 라이언의 점수가 어피치의 점수보다 낮거나 같으면 [-1]을 return 
라이언이 이길 경우 낮은 점수 비율이 큰 것으로 trturn

info를 돌면서 result에 해당하는 배열을 추가해줘야할까..?
라이언과 어피치가 동점이면 X

라이언보다 어피치가 1점이라도 높을 경우에만 라이언이 득점한다
그러면 어피치의 배열과 라이언의 배열을 비교했을 때 숫자가 남는다면 
그 점수는 라이언의 것이 된다
그런데 라이언의 점수 배열이 주어지는게 아니고 내가 구하는건데..?


화살이 1개이고 어피치가 10점에 1을 넣어버린경우에는 무조건 지기때문에
-1return한다.

*/

// 풀이를 하기엔 이미 너무 많은 시간을 쏟았고 다른 것들을 해야하기 때문에
// 풀이 해설이 없는 다른 분의 풀이코드를 보면서
// 직접 의사코드를 작성해보기로한다!
// 사실 이거도 자신이없다^^...

/*
shot이라는 함수를 만든다.
shot함수는 peachScore, ryonScore, count, idx, board를 인자로 받아서 재귀로 푼다!
count가 n 재귀 탈출 조건으로 n < count을 설정한다.
*/

let n = 5
let info = [2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]

function solution(n, info) {
    let maxDiff = 0; // 가장 큰 점수차이
    let ryonInfo = Array(11).fill(0); // 라이언의 점수배열을 일단 11개 0으로 채운 배열로 선언한다.
    
    const shot = (peachScore, ryonScore, count, idx, board) => { 
      if(n < count) return
      if(idx > 10){
        let diff = ryonScore - peachScore;
        if(diff > maxDiff){
          board[10] = n - count;
          maxDiff = diff
          ryonInfo = board;
        }
        return;
      }
      if(n > count) {
        let board2 = [...board];
        board2[10 - idx] = info[10 - idx] + 1;
        shot(peachScore, ryonScore + idx, count + info[10 - idx] + 1, idx + 1, board2);
      }
      
      if(info[10 - idx] > 0){
        shot(peachScore + idx, ryonScore, count, idx + 1, board)
      } else {
        shot(peachScore, ryonScore, count, idx + 1, board)
      }
    }
    shot(0, 0, 0, 0, ryonInfo)
    
    if(maxDiff <= 0) return [-1];
    else return ryonInfo;
  }

  /*
  테스트 1 〉	통과 (0.20ms, 33MB)
테스트 2 〉	통과 (0.46ms, 33.1MB)
테스트 3 〉	통과 (0.41ms, 33.2MB)
테스트 4 〉	통과 (0.29ms, 33MB)
테스트 5 〉	통과 (0.46ms, 33.5MB)
테스트 6 〉	통과 (0.44ms, 33.6MB)
테스트 7 〉	통과 (0.32ms, 33.4MB)
테스트 8 〉	통과 (0.22ms, 33.5MB)
테스트 9 〉	통과 (0.32ms, 33.4MB)
테스트 10 〉	통과 (0.22ms, 33.4MB)
테스트 11 〉	통과 (0.25ms, 33.5MB)
테스트 12 〉	통과 (0.26ms, 33.6MB)
테스트 13 〉	통과 (0.42ms, 33.6MB)
테스트 14 〉	통과 (0.44ms, 33.5MB)
테스트 15 〉	통과 (0.43ms, 33.5MB)
테스트 16 〉	통과 (0.35ms, 33.6MB)
테스트 17 〉	통과 (0.30ms, 33.5MB)
테스트 18 〉	통과 (0.21ms, 33.5MB)
테스트 19 〉	통과 (0.18ms, 33.4MB)
테스트 20 〉	통과 (0.40ms, 33.4MB)
테스트 21 〉	통과 (0.44ms, 33.6MB)
테스트 22 〉	통과 (0.48ms, 33.6MB)
테스트 23 〉	통과 (0.24ms, 33.4MB)
테스트 24 〉	통과 (0.41ms, 33.6MB)
테스트 25 〉	통과 (0.42ms, 33.6MB)
  */
