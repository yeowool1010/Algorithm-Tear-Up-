// 프로그래머스 자릿수 더하기
// 난이도 :  level 1
// 풀이시간 :    10분

/*
문제
자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.
예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다.

제한사항
N의 범위 : 100,000,000 이하의 자연수
입출력 예
N	answer
123	6
987	24

입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
9 + 8 + 7 = 24이므로 24를 return 하면 됩니다.
*/

/*
- 먼저 arr를 선언하여 숫자열 n을 배열로 나누어 주기 위해 String(n)을 활용하여 문자열로 바꾸어 준 후 split해 준다.
- 최종 result는 숫자형태로 선언한다.
- for문을 활용하여 선언한 arr배열의 모든 index를 더하여 result에 담아준 후 return한다.

*/

function solution(n) {
    let arr = String(n).split("");
    let result = 0;
    for(let i = 0; i < arr.length; i++) {
        result += Number(arr[i])
      }
       return result;
   }

/*
테스트 1 〉	통과 (0.04ms, 30.1MB)
테스트 2 〉	통과 (0.13ms, 29.9MB)
테스트 3 〉	통과 (0.04ms, 30.2MB)
테스트 4 〉	통과 (0.04ms, 30MB)
테스트 5 〉	통과 (0.04ms, 29.8MB)
테스트 6 〉	통과 (0.07ms, 30.1MB)
테스트 7 〉	통과 (0.04ms, 30.1MB)
테스트 8 〉	통과 (0.04ms, 30.1MB)
테스트 9 〉	통과 (0.07ms, 30MB)
테스트 10 〉	통과 (0.04ms, 29.9MB)
테스트 11 〉	통과 (0.11ms, 30.1MB)
테스트 12 〉	통과 (0.04ms, 30MB)
테스트 13 〉	통과 (0.05ms, 30.1MB)
테스트 14 〉	통과 (0.04ms, 30MB)
테스트 15 〉	통과 (0.05ms, 30.1MB)
테스트 16 〉	통과 (0.05ms, 30.2MB)
테스트 17 〉	통과 (0.04ms, 29.9MB)
테스트 18 〉	통과 (0.04ms, 29.9MB)
테스트 19 〉	통과 (0.04ms, 30MB)
테스트 20 〉	통과 (0.10ms, 30.1MB)
테스트 21 〉	통과 (0.04ms, 30.1MB)
   */

/*
for문안에서 숫자로 바꾸어주는것보다 arr로 선언할때 map으로 
숫자형태로 변환해주는 것이 속더가 더 빠른듯하지만
그렇게 많이차이나는건아니고 비슷
*/


function solution(n) {
    let arr = String(n).split("").map(Number);
    let result = 0;
    for(let i = 0; i < arr.length; i++) {
        result += arr[i]
      }
       return result;
}

/*
테스트 1 〉	통과 (0.06ms, 30.1MB)
테스트 2 〉	통과 (0.05ms, 30.1MB)
테스트 3 〉	통과 (0.05ms, 30MB)
테스트 4 〉	통과 (0.04ms, 29.8MB)
테스트 5 〉	통과 (0.04ms, 30.1MB)
테스트 6 〉	통과 (0.05ms, 30MB)
테스트 7 〉	통과 (0.05ms, 30.1MB)
테스트 8 〉	통과 (0.12ms, 30MB)
테스트 9 〉	통과 (0.05ms, 29.8MB)
테스트 10 〉	통과 (0.04ms, 30MB)
테스트 11 〉	통과 (0.08ms, 30MB)
테스트 12 〉	통과 (0.04ms, 30MB)
테스트 13 〉	통과 (0.04ms, 30.1MB)
테스트 14 〉	통과 (0.05ms, 30MB)
테스트 15 〉	통과 (0.06ms, 30.1MB)
테스트 16 〉	통과 (0.05ms, 30.1MB)
테스트 17 〉	통과 (0.04ms, 30MB)
테스트 18 〉	통과 (0.08ms, 29.9MB)
테스트 19 〉	통과 (0.07ms, 30MB)
테스트 20 〉	통과 (0.04ms, 30MB)
테스트 21 〉	통과 (0.04ms, 30.1MB)
*/


/*
reduce가 시간이 더 오래걸림
*/


function solution(n) {
    return String(n).split("").map(Number).reduce((a,b)=> a + b);
}


/*
테스트 1 〉	통과 (0.06ms, 29.8MB)
테스트 2 〉	통과 (0.07ms, 30MB)
테스트 3 〉	통과 (0.05ms, 30.2MB)
테스트 4 〉	통과 (0.07ms, 30.1MB)
테스트 5 〉	통과 (0.05ms, 30MB)
테스트 6 〉	통과 (0.04ms, 29.8MB)
테스트 7 〉	통과 (0.06ms, 29.8MB)
테스트 8 〉	통과 (0.06ms, 30.2MB)
테스트 9 〉	통과 (0.06ms, 30.1MB)
테스트 10 〉	통과 (0.05ms, 30.1MB)
테스트 11 〉	통과 (0.05ms, 30MB)
테스트 12 〉	통과 (0.05ms, 30MB)
테스트 13 〉	통과 (0.04ms, 30MB)
테스트 14 〉	통과 (0.04ms, 30.1MB)
테스트 15 〉	통과 (0.04ms, 30.1MB)
테스트 16 〉	통과 (0.09ms, 30MB)
테스트 17 〉	통과 (0.05ms, 29.8MB)
테스트 18 〉	통과 (0.05ms, 30MB)
테스트 19 〉	통과 (0.05ms, 30.1MB)
테스트 20 〉	통과 (0.04ms, 29.8MB)
테스트 21 〉	통과 (0.06ms, 30.2MB)
*/