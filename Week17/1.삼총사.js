// [PGS] 삼총사 / leve1
// 난이도 :  level 1
// 풀이시간 : 20분
// 점수 : 1

/*
문제
한국중학교에 다니는 학생들은 각자 정수 번호를 갖고 있습니다. 이 학교 학생 3명의 정수 번호를 더했을 때 0이 되면 3명의 학생은 삼총사라고 합니다. 예를 들어, 5명의 학생이 있고, 각각의 정수 번호가 순서대로 -2, 3, 0, 2, -5일 때, 첫 번째, 세 번째, 네 번째 학생의 정수 번호를 더하면 0이므로 세 학생은 삼총사입니다. 또한, 두 번째, 네 번째, 다섯 번째 학생의 정수 번호를 더해도 0이므로 세 학생도 삼총사입니다. 따라서 이 경우 한국중학교에서는 두 가지 방법으로 삼총사를 만들 수 있습니다.

한국중학교 학생들의 번호를 나타내는 정수 배열 number가 매개변수로 주어질 때, 학생들 중 삼총사를 만들 수 있는 방법의 수를 return 하도록 solution 함수를 완성하세요.

제한사항
3 ≤ number의 길이 ≤ 13
-1,000 ≤ number의 각 원소 ≤ 1,000
서로 다른 학생의 정수 번호가 같을 수 있습니다.
입출력 예
number	result
[-2, 3, 0, 2, -5]	2
[-3, -2, -1, 0, 1, 2, 3]	5
[-1, 1, -1, 1]	0
입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.
입출력 예 #2

학생들의 정수 번호 쌍 (-3, 0, 3), (-2, 0, 2), (-1, 0, 1), (-2, -1, 3), (-3, 1, 2) 이 삼총사가 될 수 있으므로, 5를 return 합니다.
입출력 예 #3

삼총사가 될 수 있는 방법이 없습니다.
*/

/*
< 의사코드 >
더하면 0이 되는 친구들이 삼총사
for문으로 돌려서 한명씩 확인하기

1. zero 배열로 선언
2. 들어오는 배열을 삼중for문으로 하나하나 확인하기 아래로 내려갈수록 1씩 더해주기
3. i j k번째 숫자를 더한 것을 zero에 담아주기
4. 0만 빼내서 zero의 길이를 리턴하던가 아무튼 0 개수 세어서 return


*/

function solution(number) {
  let zero = [];

  for (let i = 0; i < number.length; i++) {
    for (let j = i + 1; j < number.length; j++) {
      for (let k = j + 1; k < number.length; k++) {
        zero.push(number[i] + number[j] + number[k]);
      }
    }
  }
  zero.filter((el) => el === 0);
  return zero.length;
}

/*

엥 왜 필터가 안먹을까

테스트 1
입력값 〉	[-2, 3, 0, 2, -5]
기댓값 〉	2
실행 결과 〉	실행한 결괏값 10이 기댓값 2과 다릅니다.
출력 〉	[
   1, 3, -4, 0, -7,
  -5, 5, -2, 0, -3
]
테스트 2
입력값 〉	[-3, -2, -1, 0, 1, 2, 3]
기댓값 〉	5
실행 결과 〉	실행한 결괏값 35이 기댓값 5과 다릅니다.
출력 〉	[
  -6, -5, -4, -3, -2, -4, -3, -2, -1,
  -2, -1,  0,  0,  1,  2, -3, -2, -1,
   0, -1,  0,  1,  1,  2,  3,  0,  1,
   2,  2,  3,  4,  3,  4,  5,  6
]
테스트 3
입력값 〉	[-1, 1, -1, 1]
기댓값 〉	0
실행 결과 〉	실행한 결괏값 4이 기댓값 0과 다릅니다.
출력 〉	[ -1, 1, -1, 1 ]

*/

function solution(number) {
  let zero = [];
  for (let i = 0; i < number.length; i++) {
    for (let j = i + 1; j < number.length; j++) {
      for (let k = j + 1; k < number.length; k++) {
        zero.push(number[i] + number[j] + number[k]);
      }
    }
  }
  let result = zero.filter((re) => re === 0).length;
  return result;
}

/*
테스트 1
입력값 〉	[-2, 3, 0, 2, -5]
기댓값 〉	2
실행 결과 〉	실행한 결괏값 0이 기댓값 2과 다릅니다.
테스트 2
입력값 〉	[-3, -2, -1, 0, 1, 2, 3]
기댓값 〉	5
실행 결과 〉	실행한 결괏값 0이 기댓값 5과 다릅니다.
테스트 3
입력값 〉	[-1, 1, -1, 1]
기댓값 〉	0
실행 결과 〉	테스트를 통과하였습니다.
..?
*/

function solution(number) {
  let zero = [];
  for (let i = 0; i < number.length; i++) {
    for (let j = i + 1; j < number.length; j++) {
      for (let k = j + 1; k < number.length; k++) {
        zero.push(number[i] + number[j] + number[k]);
      }
    }
  }
  let result = zero.filter((el) => el === 0).length;
  return result;
}

/*
테스트 1 〉	통과 (0.17ms, 33.4MB)
테스트 2 〉	통과 (0.24ms, 33.4MB)
테스트 3 〉	통과 (0.14ms, 33.5MB)
테스트 4 〉	통과 (0.17ms, 33.5MB)
테스트 5 〉	통과 (0.15ms, 33.5MB)
테스트 6 〉	통과 (0.16ms, 33.5MB)
테스트 7 〉	통과 (0.27ms, 33.4MB)
테스트 8 〉	통과 (0.17ms, 33.4MB)
테스트 9 〉	통과 (0.21ms, 33.5MB)
테스트 10 〉	통과 (0.25ms, 33.4MB)
테스트 11 〉	통과 (0.15ms, 33.4MB)
테스트 12 〉	통과 (0.17ms, 33.6MB)
테스트 13 〉	통과 (0.16ms, 33.4MB)
*/
