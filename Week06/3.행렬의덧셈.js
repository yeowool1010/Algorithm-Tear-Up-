// 프로그래머스 행렬의 덧셈
// 난이도 :  level 1
// 풀이시간 :  20분
// 메모리 :	  KB      
// 시간 :   ms      

/*
문제
행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.

제한 조건
행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다.
입출력 예
arr1	arr2	return
[[1,2],[2,3]]	[[3,4],[5,6]]	[[4,6],[7,9]]
[[1],[2]]	[[3],[4]]	[[4],[6]]
*/

/*
1. arr1와 arr2의 길이가 같으므로 arr1의 길이만큼 순회한다.
2. 2차 for문을 순회하기 전에 2차원 배열로 만들기 위해 배열형태로 담을 newArr를 선언한다.
3. 2차 for문에서 arr1[i]의 길이만큼 순회하면서 [i]의 [j]를 순회하며 더한다
4. 더한 숫자를 newArr에 담고 newArr를 첫번째 for문 위치에서 다시 answer에 push한다.
5. 이중 for문 밖에서 answer return
*/

function solution(arr1, arr2) {
    // var answer = [[]]; // 이거때문에 많이 헤멤
    let answer = [] // 그냥 배열로 선언
    for(let i = 0; i < arr1.length; i++) {
        let newArr = []
        for(let j = 0; j < arr1[i].length; j++) {
            newArr.push(arr1[i][j] + arr2[i][j]);
        }
        answer.push(newArr)
    }
    return answer;
}

/*
테스트 1 〉	통과 (0.06ms, 30.2MB)
테스트 2 〉	통과 (0.12ms, 30.2MB)
테스트 3 〉	통과 (0.25ms, 30.1MB)
테스트 4 〉	통과 (0.15ms, 30.2MB)
테스트 5 〉	통과 (0.09ms, 30.1MB)
테스트 6 〉	통과 (0.15ms, 30.1MB)
테스트 7 〉	통과 (0.08ms, 30.1MB)
테스트 8 〉	통과 (0.12ms, 30.1MB)
테스트 9 〉	통과 (0.83ms, 34.1MB)
테스트 10 〉	통과 (0.63ms, 33.9MB)
테스트 11 〉	통과 (0.85ms, 33.7MB)
테스트 12 〉	통과 (1.03ms, 33.7MB)
테스트 13 〉	통과 (0.39ms, 33.8MB)
테스트 14 〉	통과 (0.57ms, 33.6MB)
테스트 15 〉	통과 (0.59ms, 33.7MB)
테스트 16 〉	통과 (0.66ms, 33.9MB)
테스트 17 〉	통과 (8.61ms, 64.8MB)
*/