// [PGS] [1차] 다트 게임 / leve1
// 난이도 :  level 1
// 풀이시간 :  
// 점수 : +3

/*
문제
카카오톡 게임별의 하반기 신규 서비스로 다트 게임을 출시하기로 했다. 다트 게임은 다트판에 다트를 세 차례 던져 그 점수의 합계로 실력을 겨루는 게임으로, 모두가 간단히 즐길 수 있다.
갓 입사한 무지는 코딩 실력을 인정받아 게임의 핵심 부분인 점수 계산 로직을 맡게 되었다. 다트 게임의 점수 계산 로직은 아래와 같다.

다트 게임은 총 3번의 기회로 구성된다.
각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.
점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수1 , 점수2 , 점수3 )으로 계산된다.
옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 아차상(#) 당첨 시 해당 점수는 마이너스된다.
스타상(*)은 첫 번째 기회에서도 나올 수 있다. 이 경우 첫 번째 스타상(*)의 점수만 2배가 된다. (예제 4번 참고)
스타상(*)의 효과는 다른 스타상(*)의 효과와 중첩될 수 있다. 이 경우 중첩된 스타상(*) 점수는 4배가 된다. (예제 4번 참고)
스타상(*)의 효과는 아차상(#)의 효과와 중첩될 수 있다. 이 경우 중첩된 아차상(#)의 점수는 -2배가 된다. (예제 5번 참고)
Single(S), Double(D), Triple(T)은 점수마다 하나씩 존재한다.
스타상(*), 아차상(#)은 점수마다 둘 중 하나만 존재할 수 있으며, 존재하지 않을 수도 있다.
0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수를 작성하라.

입력 형식
"점수|보너스|[옵션]"으로 이루어진 문자열 3세트.
예) 1S2D*3T

점수는 0에서 10 사이의 정수이다.
보너스는 S, D, T 중 하나이다.
옵선은 *이나 # 중 하나이며, 없을 수도 있다.
출력 형식
3번의 기회에서 얻은 점수 합계에 해당하는 정수값을 출력한다.
예) 37

입출력 예제
예제	dartResult	answer	설명
1	1S2D*3T	37	11 * 2 + 22 * 2 + 33
2	1D2S#10S	9	12 + 21 * (-1) + 101
3	1D2S0T	3	12 + 21 + 03
4	1S*2T*3S	23	11 * 2 * 2 + 23 * 2 + 31
5	1D#2S*3S	5	12 * (-1) * 2 + 21 * 2 + 31
6	1T2D3D#	-4	13 + 22 + 32 * (-1)
7	1D2S3T*	59	12 + 21 * 2 + 33 * 2
*/

/*
< 의사코드 >
다트 숫자가 10인 경우와 아닌 경우로 분리한다. 10인 경우는 index를 하나 더 늘려서 검사해야 하기 때문이다.
보너스가 D면 제곱, T면 세제곱을 한다.
옵션이 *면 2를 곱하고 이전 값이 존재하면 그 값도 2를 곱한다.
옵션이 #이면 -1을 곱한다.
배열에 저장한다.
배열 값을 모두 더한다.
*/

function solution(dartResult) {
  let answer = 0;
  let numArr = [];
  for (let i=0; i<dartResult.length; i=i+2){
      let point;
      // 10인 경우와 아닌 경우로 분리
      if(i+1<dartResult.length && dartResult[i+1] === '0'){
          point = 10;
          i++
      }else{
          point = parseInt(dartResult[i]); 
      }
      let bonus = dartResult[i+1];
      // D면 제곱, T 면 세제곱
      if(bonus === 'D'){
          point *= point;   
      }else if (bonus === 'T'){
          point *= point*point;
      }
      // * 이면 현재 값과 이전값 2배, #이면 현재값 -1
      if(i+2<dartResult.length && dartResult[i+2] === '*'){
          point *= 2;
          if(numArr.length !==0){
              numArr[numArr.length-1] *= 2;
          }
          i++
      }else if (i+2<dartResult.length && dartResult[i+2] === '#'){
          point *= -1;   
          i++;
      }
      numArr.push(point);
  }
  console.log(numArr);
  for (let i=0; i<numArr.length; i++){
      answer += numArr[i];
  }
  return answer;      
}

/*
 테스트 1 〉	통과 (2.90ms, 33.7MB)
테스트 2 〉	통과 (2.88ms, 33.5MB)
테스트 3 〉	통과 (2.88ms, 33.7MB)
테스트 4 〉	통과 (3.02ms, 33.5MB)
테스트 5 〉	통과 (3.06ms, 33.5MB)
테스트 6 〉	통과 (2.88ms, 33.6MB)
테스트 7 〉	통과 (4.63ms, 33.6MB)
테스트 8 〉	통과 (3.00ms, 33.5MB)
테스트 9 〉	통과 (4.67ms, 33.5MB)
테스트 10 〉	통과 (3.04ms, 33.5MB)
테스트 11 〉	통과 (3.61ms, 33.7MB)
테스트 12 〉	통과 (3.01ms, 33.5MB)
테스트 13 〉	통과 (4.66ms, 33.5MB)
테스트 14 〉	통과 (4.77ms, 33.5MB)
테스트 15 〉	통과 (3.34ms, 33.5MB)
테스트 16 〉	통과 (4.69ms, 33.5MB)
테스트 17 〉	통과 (3.74ms, 33.7MB)
테스트 18 〉	통과 (3.09ms, 33.5MB)
테스트 19 〉	통과 (3.20ms, 33.6MB)
테스트 20 〉	통과 (2.89ms, 33.7MB)
테스트 21 〉	통과 (2.93ms, 33.6MB)
테스트 22 〉	통과 (2.99ms, 33.5MB)
테스트 23 〉	통과 (2.90ms, 33.5MB)
테스트 24 〉	통과 (2.92ms, 33.5MB)
테스트 25 〉	통과 (2.92ms, 33.6MB)
테스트 26 〉	통과 (3.08ms, 33.6MB)
테스트 27 〉	통과 (2.92ms, 33.6MB)
테스트 28 〉	통과 (2.85ms, 33.5MB)
테스트 29 〉	통과 (3.00ms, 33.5MB)
테스트 30 〉	통과 (2.93ms, 33.6MB)
테스트 31 〉	통과 (2.86ms, 33.7MB)
테스트 32 〉	통과 (2.89ms, 33.6MB)
*/

