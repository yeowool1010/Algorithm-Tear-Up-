// [PGS] 문자열 내 마음대로 정렬하기 / leve1
// 난이도 :  level 1
// 풀이시간 : 30분
// 점수 : .  
 

/*
문제
문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 
각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 
예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.

제한 조건
strings는 길이 1 이상, 50이하인 배열입니다.
strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
모든 strings의 원소의 길이는 n보다 큽니다.
인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
입출력 예
strings	n	return
["sun", "bed", "car"]	1	["car", "bed", "sun"]
["abce", "abcd", "cdx"]	2	["abcd", "abce", "cdx"]
입출력 예 설명
입출력 예 1
"sun", "bed", "car"의 1번째 인덱스 값은 각각 "u", "e", "a" 입니다. 이를 기준으로 strings를 정렬하면 ["car", "bed", "sun"] 입니다.

입출력 예 2
"abce"와 "abcd", "cdx"의 2번째 인덱스 값은 "c", "c", "x"입니다. 따라서 정렬 후에는 "cdx"가 가장 뒤에 위치합니다. "abce"와 "abcd"는 사전순으로 정렬하면 "abcd"가 우선하므로, 답은 ["abcd", "abce", "cdx"] 입니다.
*/

/*
<의사코드>
sort를 활용하여 풀어내기!
1. sort로 a[n]와 b[n]가 오름차순으로 정렬 될 수 있도록 화살표함수 안에 if문으로 조건을 나누어 준다.
2. 만약 n번째 인덱스가 동일할 경우 단어 자체가 사전순으로 나열 될 수 있도록 
   세번째 if문을 열어서 그 안에 단어를 기준으로 오름차순 정렬되도록 
   두 개의 if문을 입력 해 준다.
*/


function solution(strings, n) {
    return strings.sort((a,b) => {
        if(a[n] > b[n]) {
            return 1;
        }
        if(a[n] < b[n]) {
            return -1;
        }
        if(a[n] === b[n]) {
            if(a > b) return 1;
            if(a < b) return -1;
            }
        return 0;
        })
}


/*
테스트 1 〉	통과 (0.11ms, 30MB)
테스트 2 〉	통과 (0.10ms, 30.2MB)
테스트 3 〉	통과 (0.10ms, 30.2MB)
테스트 4 〉	통과 (0.13ms, 30MB)
테스트 5 〉	통과 (0.06ms, 30.1MB)
테스트 6 〉	통과 (0.10ms, 30.3MB)
테스트 7 〉	통과 (0.06ms, 30.3MB)
테스트 8 〉	통과 (0.08ms, 29.8MB)
테스트 9 〉	통과 (0.09ms, 30MB)
테스트 10 〉	통과 (0.09ms, 29.8MB)
테스트 11 〉	통과 (0.06ms, 30.2MB)
테스트 12 〉	통과 (0.10ms, 29.9MB)
*/